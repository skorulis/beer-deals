org: skorulis
app: deals-api
service: rest-api

custom:
  s3Bucket: deals-webfe-bucket-${self:provider.stage}
  imageBucket: deals-webfe-bucket-${self:provider.stage}
  usersTableName: 'users-${self:provider.stage}'
  venuesTableName: "venues-${self:provider.stage}"
  reportsTableName: "reports-${self:provider.stage}"
  customDomain:
    domainName: api.localdeals.click
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateName: localdeals.click
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
  serverless-offline:
    noPrependStageInUrl: true
 
provider:
  name: aws
  stage: dev
  httpApi:
    cors: true
    payload: '2.0'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
      Resource: "arn:aws:s3:::${self:custom.imageBucket}/*"
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    VENUES_TABLE: ${self:custom.venuesTableName}
    REPORTS_TABLE: ${self:custom.reportsTableName}
    GOOGLE_API_KEY: ${param:googleAPIKey}
    USER_POOL_ID: { Ref: UserPool }
    CLIENT_ID: { Ref: UserClient }
    IMAGE_BUCKET: ${self:custom.imageBucket}
 
functions:
# Util
  health:
    handler: src/lambda/health.handler
    url:
      cors:
        allowedOrigins:
          - '*'
    events:
      - httpApi:
          path: /
          method: get
# Auth

  register:
    handler: src/lambda/register.handler
    events:
      - httpApi:
          path: /auth/register
          method: post
  login:
    handler: src/lambda/login.handler
    events:
      - httpApi:
          path: /auth/login
          method: post
# Venues
  details:
    handler: src/lambda/venue/details.handler
    events:
      - httpApi:
          path: /venue/{id}
          method: get

  homeVenues:
    handler: src/lambda/venue/home.handler
    events:
      - httpApi:
          path: /venue
          method: get

  addVenue:
    handler: src/lambda/addVenue.handler
    events:
      - httpApi:
          path: /venue/add
          method: post
    
  venueAutocomplete:
    handler: src/lambda/venue/autocomplete.handler
    events:
      - httpApi:
          path: /venue/autocomplete
          method: get
# Deals
  addDeal:
    handler: src/lambda/addDeal.handler
    events:
      - httpApi:
          path: /deal
          method: post
  deleteDeal:
    handler: src/lambda/deleteDeal.handler
    events:
      - httpApi:
          path: /deal
          method: delete
# Report
  openReports:
    handler: src/lambda/report/openReports.handler
    events:
      - httpApi:
          path: /report
          method: get

  createReport:
    handler: src/lambda/report/create.handler
    events:
      - httpApi:
          path: /report
          method: post
  actionReport:
    handler: src/lambda/report/action.handler
    events:
      - httpApi:
          path: /report/action
          method: post
# Profile

  profile:
    handler: src/lambda/profile.handler
    events:
      - http:
          path: /user/profile
          method: get
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userID
            AttributeType: S
        KeySchema:
          -
            AttributeName: userID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.usersTableName}
    ReportsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: reportID
            AttributeType: S
        KeySchema:
          -
            AttributeName: reportID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.reportsTableName}
    VenuesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: placeID
            AttributeType: S
          -
            AttributeName: compoundID
            AttributeType: S
        KeySchema:
          -
            AttributeName: placeID
            KeyType: HASH
          -
            AttributeName: compoundID
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.venuesTableName}
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
          Enabled: 'true'
          ## Uncomment the following section in case you are using a custom domain
          # Aliases:
          # - mysite.example.com
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ## The origin id defined above
            TargetOriginId: WebApp
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'

plugins:
  - serverless-plugin-typescript
  - serverless-domain-manager
  - serverless-dynamodb-local
  - serverless-offline #Must be last
